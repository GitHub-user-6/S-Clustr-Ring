
PROJECT = "S-Clustr"
VERSION = "1.0.0"

local host = "@SERVER_IP"
local port = @SERVER_PORT
local is_udp = false
local is_tls = false
local type = "{\"TYPE\":\"AIR780E\"}"
local recv_run_command = "@SERVER_RUN"
local recv_stop_command = "@SERVER_STOP"
local response_run_command = "@RESPON_RUN"
local response_stop_command = "@RESPON_STOP"
local recv_heartbeat = "HP"
local response_heartbeat = "Heartbeat."

log.info("main", PROJECT, VERSION)


sys = require("sys")
sysplus = require("sysplus")
libnet = require "libnet"



if rtos.bsp() == "EC618" and pm and pm.PWK_MODE then
    pm.power(pm.PWK_MODE, false)
end

if wdt then
    wdt.init(9000)
    sys.timerLoopStart(wdt.feed, 3000)
end


local function netCB(msg)
	log.info("未处理消息", msg[1], msg[2], msg[3], msg[4])
end


sys.taskInit(function()
    if wlan and wlan.connect then
        local ssid = "luatos1234"
        local password = "12341234"
        log.info("wifi", ssid, password)
        wlan.init()
        wlan.setMode(wlan.STATION)
        wlan.connect(ssid, password, 1)
    elseif mobile then
    elseif w5500 then
        w5500.init(spi.HSPI_0, 24000000, pin.PC14, pin.PC01, pin.PC00)
        w5500.config()
        w5500.bind(socket.ETH0)
    elseif socket then
        sys.timerStart(sys.publish, 1000, "IP_READY")
    else
        while 1 do
            sys.wait(1000)
            log.info("bsp", "本bsp可能未适配网络层, 请查证")
        end
    end
    sys.waitUntil("IP_READY")
    sys.publish("net_ready")
end)


local function sockettest()
    sys.waitUntil("net_ready")
    socket.sntp()
    local taskName = "sc"
    local topic = taskName .. "_txrx"
    log.info("topic", topic)
    local txqueue = {}
    sysplus.taskInitEx(sockettask, taskName, netCB, taskName, txqueue, topic)
    while 1 do
        local result, tp, data = sys.waitUntil(topic, 30000)
        log.info("event", result, tp, data)
        if not result then
            table.insert(txqueue, string.char(0))
            sys_send(taskName, socket.EVENT, 0)
        elseif tp == "uplink" then
            table.insert(txqueue, data)
            sys_send(taskName, socket.EVENT, 0)
        elseif tp == "downlink" then
            log.info("socket", "收到下发的数据了", #data)
        end
    end
end



function sockettask(d1Name, txqueue, rxtopic)
    log.info("socket", host, port, is_udp and "UDP" or "TCP", is_tls and "TLS" or "RAW")
    gpio.setup(22, 0, gpio.PULLDOWN)
    local rx_buff = zbuff.create(1024)
    local netc = socket.create(nil, d1Name)
    socket.config(netc, nil, is_udp, is_tls)
    log.info("任务id", d1Name)

    while true do
        log.info("socket", "开始连接服务器")
        sysplus.cleanMsg(d1Name)
        local result = libnet.connect(d1Name, 15000, netc, host, port)
        if result then
			log.info("socket", "服务器连上了")
            libnet.tx(d1Name, 0, netc, type)
        else
            log.info("socket", "服务器没连上了!!!")
		end
		while result do
			local succ, param = socket.rx(netc, rx_buff)
			if not succ then
				log.info("服务器断开了", succ, param, ip, port)
				break
			end
			if rx_buff:used() > 0 then
				log.info("socket", "收到服务器数据，长度", rx_buff:used())
                local data = rx_buff:query()
                if data == recv_run_command then
                    libnet.tx(d1Name, 0, netc, response_run_command)
                    gpio.set(22, 1)
                elseif data == recv_stop_command then
                    libnet.tx(d1Name, 0, netc, response_stop_command)
                    gpio.set(22, 0)
                end
                sys.publish(rxtopic, "downlink", data)
				rx_buff:del()
			end
			result, param, param2 = libnet.wait(d1Name, 15000, netc)
            log.info("libnet", "wait", result, param, param2)
			if not result then
				log.info("socket", "服务器断开了", result, param)
				break
            end
		end
		libnet.close(d1Name, 5000, netc)
		sys.wait(30000)
    end
end

sys.taskInit(sockettest)
sys.run()
